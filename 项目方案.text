
项目前端架构:monorepo架构 + 微项目
npm包：parse解析器、sdk、组件库
项目:编辑器、底座 这两个项目依赖以上 (parse解析器 -> 组件库) 和 (sdk外链)

sdk功能点：
【axios封装】
【websoket封装】
【数据库表的实体对象】 基于 axios
【数据二次加工】 比如：echars数据模型
【event bus】
【第三方引入支持】


组件库：
【基础组件】 基于element-plus 或 iview 二次封装 支持单独暴露接口引入
【常用业务组件】 基于基础组件的封装
【外部组件集成】 调用后台接口获取json配置信息


parse解析器:
【preview组件】 用来解析json schema配置渲染组件信息到一个完整的页面，底座使用、编辑器预览使用


编辑器功能点: 依赖：sdk、parse解析器
【站点管理（表格页）】 
【页面管理（分组表格）】 
【组件管理（组件分组、组件注册功能）】 
【数据管理（分组表格）】 
【模板管理（分组表格）】 
【编辑器（编辑面板、组件调用、组件配置）】用来生成json schema
【preview预览】 依赖parse解析器的包


底座项目功能点: 依赖：sdk、parse解析器
【支持menuList菜单权限获取和menu组件】
【支持keep-alive的动态路由缓存：addRoutes、matcher】 尝试实现：push重建页面，back缓存页面
【预请求后台json schema 菜单路由页面信息】
【通过解析器来解析JSON Schema配置，渲染页面布局和Components】 依赖parse解析器的包。 Components分类：1.【vue组件】 2.【web components】 3.【微前端】
【支持数据通讯：event bus】
【支持多tab view渲染】


技术栈:vue、vue-router、piaia、element-ui


编辑器原理：
    
    组件库:将所有组件定义到全局Vue.components(asyncComponent.name,asyncComponent)

    一、元件库数据列表：
    const libs = [{
        title: "模块-机构表格",
        icom: "",
        type: "组件类型",
        visible: true,
        name: "module-table",
        component: asyncComponent
    }]

    二、将元件的组件注册到全局Vue.components(lib.name,lib.component)

    二、Element类: 
    {
        uuid:xxxxxxx,
        name:xxxxx,
        commonStyle:对应右侧编辑区域的公共样式（比如宽高、坐标）,
        pluginProps:对应右侧编辑区域的组件props,
        events:对应右侧编辑区域的事件列表,
        methodList:对应右侧编辑区域的方法,
        scripts:对应右侧编辑区域的脚本,

        getStyle(){} 获取盒模型和坐标样式
        getRenderVal(){} 获取h函数所需的属性格式,可以抽离出去作为一个解析器
    }

    三、store舞台：
    [
        Element类,Element类,Element类
    ]


    编辑器添加逻辑:
    1、当点击某一个元件时,将元件的组件创建vm实例,得到vm实例对象
    2、将元件对象和vm.$options对象合并成一个对象,作为基础配置ele类选项
    3、构建一个Element类,代表右侧面板中的ele元素对象
    4、使用ele类选项实例化一个Element类,得到element实体,每个实体具备唯一uuid,使用uuid重新注册组件到全局
    5、将element实体push到store舞台数组中

    编辑器编辑逻辑:
    1、

    编辑器预览逻辑:
    1、从store中导入舞台数据,遍历所有element实体元素,通过h函数渲染element.uuid对应的全局组件和属性列表到指定的容器中

    解析器parse原理：
    - 从后台接口拿到json schema数据。
    - vue.component注册全部组件库。
    - 创建一个解析器组件 <Work :work="work"></Work>
    - Work组件处理 Work容器样式,根据tabs选项渲染WorkView组件
    - 